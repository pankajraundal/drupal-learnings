<?php

namespace Drupal\mclaim\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;

class SubmitClaimsForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'submit_claims_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // Claims Number field - autogenerated numeric field with 9 digit size
    $form['claims_number'] = array(
      '#type' => 'number',
      '#title' => $this->t('Claims Number'),
      '#required' => TRUE,
      '#attributes' => array('maxlength' => 9), // Restrict to 9 digits
    );

    // Patient Name field - Free text Input should only Alphabets
    $form['patient_name'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Patient Name'),
      '#required' => TRUE,
      '#pattern' => '[a-zA-Z\s]+', // Allow only alphabets and spaces
    );

    // Service type field - dropdown with values "Medical" and "Dental"
    $form['service_type'] = array(
      '#type' => 'select',
      '#title' => $this->t('Service Type'),
      '#options' => array(
        'medical' => $this->t('Medical'),
        'dental' => $this->t('Dental'),
      ),
      '#required' => TRUE,
    );

    // Provider Name field - string input
    $form['provider_name'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Provider Name'),
      '#required' => TRUE,
    );

    // Claims value field - Numeric value prefixed with $
    $form['claims_value'] = array(
      '#type' => 'number',
      '#title' => $this->t('Claims Value'),
      '#required' => TRUE,
      '#field_prefix' => '$',
      '#pattern' => '[0-9]+', // Allow only numeric values
    );

    // Submission Date field - date type, system date should be default date and user can override or update that
    $form['submission_date'] = array(
      '#type' => 'datetime',
      '#title' => $this->t('Submission Date'),
      '#required' => TRUE,
      '#default_value' => new DrupalDateTime(), // Default to system date
    );

    // Add submit button
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    );

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    // Validate Claims Number field
    $claims_number = $form_state->getValue('claims_number');
    if (!is_numeric($claims_number) || strlen($claims_number) !== 9) {
      $form_state->setErrorByName('claims_number', $this->t('Claims number must be a 9-digit number.'));
    }

    // Validate Patient Name field
    $patient_name = $form_state->getValue('patient_name');
    if (!preg_match('/^[a-zA-Z\s]+$/', $patient_name)) {
      $form_state->setErrorByName('patient_name', $this->t('Patient name should only contain alphabets and spaces.'));
    }

    // Validate Service Type field
    $service_type = $form_state->getValue('service_type');
    if (!in_array($service_type, ['medical', 'dental'])) {
      $form_state->setErrorByName('service_type', $this->t('Invalid service type selected.'));
    }

    // Validate Provider Name field
    $provider_name = $form_state->getValue('provider_name');
    if (empty($provider_name)) {
      $form_state->setErrorByName('provider_name', $this->t('Provider name is required.'));
    }

    // Validate Claims Value field
    $claims_value = $form_state->getValue('claims_value');
    if (!is_numeric($claims_value)) {
      $form_state->setErrorByName('claims_value', $this->t('Claims value must be a numeric value.'));
    }

    // Validate Submission Date field
    $submission_date = $form_state->getValue('submission_date');
    if (!strtotime($submission_date)) {
      $form_state->setErrorByName('submission_date', $this->t('Invalid submission date.'));
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Process form submission
    // Validate data and store it in a local JSON file through RESTful API
    // Get form data
    $data = [
      'claims_number' => $form_state->getValue('claims_number'),
      'patient_name' => $form_state->getValue('patient_name'),
      'service_type' => $form_state->getValue('service_type'),
      'provider_name' => $form_state->getValue('provider_name'),
      'claims_value' => $form_state->getValue('claims_value'),
      'submission_date' => $form_state->getValue('submission_date')->format("Y-m-d H:i:s"),
    ];

    // Send form data to the custom REST endpoint
    $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
    $url = $protocol . $_SERVER['HTTP_HOST'] . '/api/submit-claims';
    try {
      $response = \Drupal::httpClient()->post($url, [
        'json' => $data,
        'headers' => [
          'Content-Type' => 'application/json',
        ],
      ]);
      \Drupal::messenger()->addStatus(t('@claim_number submitted successfully.', ['@claim_number' => $form_state->getValue('claims_number')]));
    }
    catch (\Exception $e) {
      \Drupal::messenger()->addError(t('Failed to submit form data. Please try again later.'));
    }
  }

}
