<?php /** @noinspection PhpUnusedParameterInspection */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\file\Entity\File;
use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt\Entity\JobItem;
use Drupal\tmgmt\JobInterface;
use Drupal\tmgmt\TranslatorInterface;
use Drupal\tmgmt_contentapi\Util\GeneralHelper;
use Drupal\tmgmt_contentapi\Util\ConentApiHelper;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\ProviderApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\JobApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\RequestApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\FileApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\SourceFileApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\TranslationMemoryApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\TokenApi;
use Drupal\tmgmt_contentapi\Swagger\Client\Api\StatusUpdateApi;

use Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum;
use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM;

use Drupal\tmgmt_contentapi\Swagger\Client\Configuration;
use Drupal\tmgmt_contentapi\Swagger\Client\ObjectSerializer;
use Drupal\tmgmt_contentapi\Plugin\tmgmt_contentapi\Format\Xliff;
use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken;
use Drupal\Core\File\FileSystemInterface;
use Drupal\tmgmt_contentapi\JobJourneyLog;

//ini_set('MAX_EXECUTION_TIME', 3600);
/**
 * @contentapi
 * Module file of the translation management module.
 */


/**
 * Import form submit callback.
 */
function tmgmt_contentapi_import_form_submit(array $form, FormStateInterface $form_state) {
  // Ensure we have the file uploaded.
  $job = $form_state->getFormObject()->getEntity(); 

  if ($file = file_save_upload('file', array('file_validate_extensions' => array('xlf')), FALSE, 0)) {
    $extension = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
    $plugin = new Xliff();
    if ($plugin) {
      // Validate the file on job.
      $validated_job = $plugin->validateImport($file->getFileUri(), $job);
      if (!$validated_job) {
        $job->addMessage('Failed to validate file, import aborted.', array(), 'error');
      }
      elseif ($validated_job->id() != $job->id()) {
        $job->addMessage('The imported file job id @file_id does not match the job id @job_id.', array(
          '@file_id' => $validated_job->id(),
          '@job_id' => $job->id(),
        ), 'error');
      }
      else {
        try {
          // Validation successful, start import.
          // Check if it makes sense to check only the active state here?
          GeneralHelper::resetJobandItemsToActive($job,$file);
          $job->addTranslatedData($plugin->import($file->getFileUri()));
          $job->addMessage('Successfully imported file.');
          ConentApiHelper::checkJobFinishAndApproveRemote($job);
        } catch (Exception $e) {

          $msg = 'File import failed with the following message: '.$e->getMessage();
          if(strlen($msg) > 200){
                $msg = substr($msg,0,200);
          }
          $job->addMessage($msg, array(), 'error');
        }
      }
    }
  }
  tmgmt_write_request_messages($job);
}

function tmgmt_contentapi_semi_import_form_submit(array $form, FormStateInterface $form_state) {
  $job = $form_state->getFormObject()->getEntity();
  $translator = $job->getTranslator();
  if($translator){
    try{
      tmgmt_contentapi_downlaod_data_from_contentapi_by_job_manual($translator,$job);
    }
    catch (Exception $exception){
        $msg = 'Files could not be downlaoded or imported, see error message: '.$exception->getMessage();
          if(strlen($msg) > 200){
                $msg = substr($msg,0,200);
          }
        $job->addMessage($msg);
    }
  }
  tmgmt_write_request_messages($job);
}

function tmgmt_contentapi_update_tm_form_submit(array $form, FormStateInterface $form_state){
  
  $job = $form_state->getFormObject()->getEntity();
  $translator = $job->getTranslator();
  if($translator && $job->getState() == Job::STATE_FINISHED){
    $createdcpjob = NULL;
    $token = NULL;
    $zipPath = NULL;
    $ziparchive = NULL;
    $jobapi = NULL;
    $allfilespath = NULL;
    try {
      // Message which will be displayed using drupa_set_message to disaplay download.
      $messageTopass = 'TM update request successfully submitted.<br/>Exported files can be downoaded here:<br/>';
      $contentapisettings = $translator->getSetting("capi-settings");
      $oneexportfile = $translator->getSetting("one_export_file");
      $capisettings = $translator->getSetting('capi-settings');
      $capi = new TokenApi();
      $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
      // Export files: gernerate paths and other variables.
      $exporter = new Xliff();
      $filesystem = \Drupal::service('file_system');
      $joblabel = GeneralHelper::getJobLabelNoSpeChars($job);
      $dirnameallfiles = $joblabel . '_tmupdate_' . $job->id() . "_" . $job->getRemoteSourceLanguage() . "_" . $job->getRemoteTargetLanguage();
      $zipName = 'zip_job_' . $dirnameallfiles . '.zip';
      $allfilespath = $job->getSetting('scheme') . '://tmgmt_contentapi/LioxSentFiles/' . $dirnameallfiles;
      $zipPath = $allfilespath . "/" . $zipName;
      $filearraytodelte = array();
      $filearrayexportedfiles = array();
      $transferfiles = array();
      // Create folder where all exported files will be stored.
      if (\Drupal::service('file_system')->prepareDirectory($allfilespath, FileSystemInterface::CREATE_DIRECTORY)) {
        // Export each item of the job in same file.
        if($oneexportfile){
          $labelname = $joblabel;
          $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
          $jobpath = $allfilespath . "/" . $name;
          $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
          $filearraytodelte[] = $file;
          $filearrayexportedfiles['all'] = $file;
        }
        else {
          // Export each item of the job in separate file.
          foreach ($job->getItems() as $item) {
            $labelname = GeneralHelper::getStringNoSpeChars($item->label());
            $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
            $itempath = $allfilespath . "/" . $name;
            $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
            $filearraytodelte[] = $file;
            $filearrayexportedfiles[$item->id()] = $file;
          }
        }
        // Zip the exported files.
        $ziparchive = new ZipArchive();
        $openresult = $ziparchive->open($filesystem->realpath($zipPath), ZIPARCHIVE::CREATE | ZIPARCHIVE::OVERWRITE);
        $zipcloseresult = FALSE;
        if ($openresult) {
          foreach ($filearrayexportedfiles as $tempfile) {
            $ziparchive->addFile($filesystem->realpath($tempfile->getFileUri()), $tempfile->getFilename());
          }
          $zipcloseresult = $ziparchive->close();
          if ($zipcloseresult) {
            $zipfileobj = GeneralHelper::createFileObject($zipPath);
            \Drupal::service('file.usage')->add($zipfileobj, 'tmgmt_contentapi', 'tmgmt_job', $job->id());
          }
        }
        else {

        }

        $transferfiles = $filearrayexportedfiles;

        // Create Job in Content API.
        $contentapibundle = array();
        $jobapi = new JobApi();
        // Upload files from transferfiles array to CPA.
        $fileapi = new SourceFileApi();
        // Array to store temporally translation requst and associated files.
        $contentapitrrequstfiles = array();
        foreach ($transferfiles as $id => $tmpfile) {
          $data = array();
          $data["job_id"] = GeneralHelper::getCpJobIdfromLocJob($job);
          $data["filename"] = $tmpfile->getFilename();
          $data["filetype"] = $tmpfile->getMimeType();
          $stmrg = \Drupal::service('stream_wrapper_manager')->getViaUri($tmpfile->getFileUri());
          $extpath = $stmrg->realpath();
          $filrequst = new SplFileObject($extpath);
          //unarchive job, if archived
          // $actualcpjobinfo = $jobapi->jobsJobIdGet($token,GeneralHelper::getCpJobIdfromLocJob($job));
          // $wasarchived = $actualcpjobinfo->getArchived();
          // if($wasarchived){
            // $jobapi->jobsJobIdUnarchivePut($token, GeneralHelper::getCpJobIdfromLocJob($job));
          // }
          $contentapitmpfile = $fileapi->jobsJobIdUploadPost($token, $data["job_id"], $data["filename"], $data["filetype"], $filrequst);

          $uploadedFile = $fileapi->uploadFile($contentapitmpfile, $extpath);

          



          $tmupdateapi = new TranslationMemoryApi();
          $tmupdaterequest = new CreateRequestUpdateTM(
            array(
              'file_id' => $contentapitmpfile->getfms_file_id(),
              'source_native_language_code' => $job->getRemoteSourceLanguage(),
              'target_native_language_code' => $job->getRemoteTargetLanguage()
            ));
          $tmupdateresponse = $tmupdateapi->jobsJobIdTmUpdatefilePut($token,GeneralHelper::getCpJobIdfromLocJob($job), $tmupdaterequest);
          $contentapibundle[] = $createdcpjob;
        }

        if ($wasarchived) {
          // arvhive cpjob if it was archived before
          // $jobapi->jobsJobIdArchivePut($token, GeneralHelper::getCpJobIdfromLocJob($job));
        }
        foreach ($filearraytodelte as $tempfile) {
          \Drupal::service('file_system')->delete($tempfile->getFileUri());
        }
        $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
        \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
      }
      else {
        throw new \Exception("Could not create directory for export: " . $allfilespath);
      }
    }
    catch (\Exception $exception) {
      // If exception occurs, clean up everything: delete exported files, cancel job in CA if any.
      foreach ($filearraytodelte as $tempfile) {
        if (file_exists($tempfile->getFileUri())) {
          \Drupal::service('file_system')->delete($tempfile->getFileUri());
        }
      }
      if (!file_exists($zipPath) && $ziparchive != NULL) {
        $ziparchive->close();
      }
      // TODO: Check why zip cannot be deleted. But after two tests seems to work?
      $zipfileobj = GeneralHelper::createFileObject($zipPath);
      \Drupal::service('file_system')->delete($zipfileobj->getFileUri());
      \Drupal::service('file_system')->deleteRecursive($allfilespath);
      $msg = $exception->getMessage();
      if(strlen($msg) > 200){
            $msg = substr($msg,0,200);
      }
      \Drupal::messenger()->addMessage($msg, "error");
    }
  }
  tmgmt_write_request_messages($job);
}

function tmgmt_contentapi_import(JobInterface $job,$filedatastring,$name){

 
  // Ensure we have the file uploaded.
  
  try{
    $message='';
    $path = $job->getSetting('scheme') . '://tmgmt_contentapi/LioxReceivedFiles/' . $name;
    $dirname = dirname($path);
    //\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
    if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
      $file = file_save_data($filedatastring, $path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
      $mimetype = $file->getMimeType();//\Drupal::service('file.mime_type.guesser')->guess($path);
      $filearray = null;
      if ($mimetype == 'application/zip') {
        $ziparchive = new ZipArchive();
        $openachresult = $ziparchive->open(\Drupal::service('file_system')->realpath($path));
        if ($openachresult) {
          $pathtoextract = $job->getSetting('scheme') . '://tmgmt_contentapi/LioxReceivedFiles/' . pathinfo($path)['filename'];
          if ($ziparchive->extractTo(\Drupal::service('file_system')->realpath($pathtoextract))) {
            $ziparchive->close();
            $file->delete();
            $filearray = CpcreateFileObjectFromStdClass(file_scan_directory($pathtoextract, '/.*\.xlf$/'));
          }

        }
      } else {
        $filearray = array($file);
      }
      foreach ($filearray as $fileitem){
        $extension = pathinfo($fileitem->getFileUri(), PATHINFO_EXTENSION);
        $plugin = new Xliff();
        if ($plugin) {
          // Validate the file on job.
          $validated_job = $plugin->validateImport($fileitem->getFileUri(), $job);
          if (!$validated_job) {
            \Drupal::logger('TMGMT_CONTENTAPI')->error('Failed to validate file %FILE for job %JOB, import aborted.', [
              '%JOB' => $job->label(),
              '%FILE' => $fileitem->getFileName(),
            ]);
            $job->addMessage('Failed to validate file, import aborted.', array(), 'error');
          } elseif ($validated_job->id() != $job->id()) {
            \Drupal::logger('TMGMT_CONTENTAPI')->notice('The imported file job id %file_id does not match the job id %job_id.', [
              '%file_id' => $validated_job->id(),
              '%job_id' => $job->id(),
            ]);
            $job->addMessage('The imported file job id @file_id does not match the job id @job_id.', array(
              '@file_id' => $validated_job->id(),
              '@job_id' => $job->id(),
            ), 'error');
          } else {
            try {
              // Validation successful, start import.
              // TODO: Check if it makes sense to check only the active state here?
              
              GeneralHelper::resetJobandItemsToActive($job,$fileitem);
            

              $job->addTranslatedData($plugin->import($fileitem->getFileUri()));
              \Drupal::logger('TMGMT_CONTENTAPI')->notice('Successfully imported file %file_id for job %job_id.', [
                '%file_id' => $fileitem->getFileName(),
                '%job_id' => $job->label(),
              ]);
              $job->addMessage('File @filename imported successfully',array('@filename'=>$fileitem->getFileName()));
            } catch (Exception $e) {
              \Drupal::logger('TMGMT_CONTENTAPI')->error('File import for job %JOB failed with the following message: %message', [
                '%JOB' => $job->label(),
                '%message' => $e->getMessage(),
              ]);
              $msg = 'File import failed with the following message: '.$e->getMessage();
              if(strlen($msg) > 200){
                $msg = substr($msg,0,200);
              }
              $job->addMessage($msg, array(), 'error');
              //$job->addMessage('File import failed with the following message: @message', array('@message' => $e->getMessage()), 'error');

            }
          }
        }
      }
    }
  }
  catch(Exception $ep)
  {
    throw $ep;
  }
 
  
}





function load_drupal_jobs_from_capi_jobs($capiJobs){
  
  $jobJourneyLog = new JobJourneyLog();
  $jobJourneyLog->writeLogToFile('', "capiJobSetStoredData: Inside load_drupal_jobs_from_capi_jobs", [$capiJobs, 'CapiJobsCount' => count($capiJobs)]);
  if(count($capiJobs) == 0)
  {
    $jobJourneyLog->writeLogToFile('', "capiJobSetStoredData", ['CapiJobsCount' => count($capiJobs)]);
    return $capiJobs;
  }
  
  
  $processedResults = array();

    
    $sub_query2 = \Drupal::database()->select('tmgmt_message', 'c');
    // $sub_query2->addField('c', 'tjid');
    $sub_query2->addExpression("MAX(c.mid)", 'mid');
    $sub_query2->condition('c.type', 'jobinfo','=');
    
    $conditionGroup2 = $sub_query2->orConditionGroup();
    foreach($capiJobs as $value){
      $conditionGroup2->condition('c.message', '%"'.$value['jobId'].'"%','LIKE');
    }
    $sub_query2->condition($conditionGroup2);
    $sub_query2->groupBy('c.tjid');

    $sub_query3 = \Drupal::database()->select('tmgmt_message', 'd');
    $sub_query3->addField('d', 'message');
    $sub_query3->addField('d', 'tjid');
    $sub_query3->condition('d.mid', $sub_query2,'IN');

    $qryResult2 = $sub_query3->execute()->fetchAll();
    
    foreach($qryResult2 as $value2)
    {
      $jobId = $value2->tjid;
      $messageInfo = json_decode($value2->message, true);
      $newData = array();
      $newData['capiJob'] = array();
      $newData['capiJob']['jobId']=$messageInfo['jobId'];
      $newData['capiJob']['providerId']=$messageInfo['providerId'];
      $newData['capiJob']['status']=$messageInfo['jobStatus'];
      $newField = array();
      $newField['tjid'] = $jobId;
      $newField['data'] = json_encode($newData);

      $processedResults[$messageInfo['jobId']] = $newField;
    }   
  $jobJourneyLog->writeLogToFile('', "Processed Results", $processedResults);

  
  foreach($processedResults as $value)
  {
   
    $loadedData = json_decode($value['data'], true);
    
    if(array_key_exists($loadedData['capiJob']['jobId'], $capiJobs) == false){
      $jobJourneyLog->writeLogToFile($loadedData['capiJob']['jobId'], "Job Not exist", $capiJobs);
      continue;
    }
    
    $tmpItem = $capiJobs[$loadedData['capiJob']['jobId']];
    $tmpItem['providerId'] = $loadedData['capiJob']['providerId'];
    $tmpItem['prevStatus'] = $loadedData['capiJob']['status'];
    $tmpItem['drupalJob'] = Job::load($value['tjid']);

    $jobJourneyLog->writeLogToFile($tmpItem['jobId'], "Temp Item", $tmpItem);

    if($tmpItem['prevStatus'] != $tmpItem['status']){
      $storeArray = ['jobId' => $tmpItem['jobId'], 'jobStatus' => $tmpItem['status'], 'providerId' => $tmpItem['providerId'], 'jobType' => $tmpItem['type']];
      ConentApiHelper::capiJobSetStoredData($tmpItem['drupalJob'],  $storeArray);

      $jobJourneyLog->writeLogToFile($tmpItem['jobId'], "Previous Status comparision", $storeArray);
    }
    $capiJobs[$loadedData['capiJob']['jobId']] = $tmpItem;
  }
  for($idx = count($capiJobs); $idx > 0; $idx--){
    if(array_key_exists('drupalJob', $capiJobs[array_keys($capiJobs)[$idx - 1]]) == false){
      array_splice($capiJobs, $idx - 1, 1);
    }
  }
  $jobJourneyLog->writeLogToFile('', "Return from load_drupal_jobs_from_capi_jobs", [$capiJobs, 'CapiJobsCount' => count($capiJobs)]);
  return $capiJobs;
}

function tmgmt_contentapi_get_capijob_from_drupaljob($capiToken, $cttToken, JobInterface $job){
  $jobapi = new JobApi();
  $prId = GeneralHelper::getCpJobIdfromLocJob($job);
  
  $requestapi = new RequestApi();
  
  $jobapi = new JobApi();
  $find_job = $jobapi->FindJob($capiToken, $prId);
  if($find_job != 200)
  {
    $requestsarray = $requestapi->jobsJobIdRequestsGetCtt($cttToken,$prId);
    $projectInfo = $jobapi->jobsJobIdGetCtt($cttToken, $prId, "fullWithStats");
    $jobstatus = $projectInfo->getStatusCode()->getStatusCode();

  }
  else
  {
    $requestsarray = $requestapi->jobsJobIdRequestsGet($capiToken,$prId);
    $projectInfo = $jobapi->jobsJobIdGet($capiToken, $prId, "fullWithStats");
    if($projectInfo->getStatusCode() != 'COMPLETED')
    {
      $jobstatus = $jobapi->jobsJobIdGetStatus($capiToken, $prId);
    }
    else
    {
      $jobstatus = $projectInfo->getStatusCode();
    }
  }
  $requestIds = array();
  foreach($requestsarray as $request){
    array_push($requestIds, $request->getRequestId());
  }
  $jobInfo['type'] = ($find_job != 200 ? 1 : 2);
  $jobInfo['jobId'] = $projectInfo->getJobId();
  $jobInfo['updateId'] = '';
  $jobInfo['requestIds'] = $requestIds;
  $jobInfo['providerId'] =  $projectInfo->getProviderId();
  $jobInfo['status'] = $jobstatus;
  $jobInfo['drupalJob'] = $job;
  return $jobInfo;
}
function tmgmt_get_capi_token(TranslatorInterface $translator){
  $capi = new TokenApi();
  $capisettings = $translator->getSetting('capi-settings');
  return $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
}
function tmgmt_get_ctt_token(TranslatorInterface $translator){
  $capisettings = $translator->getSetting('capi-settings');
  if($capisettings['capi_username_ctt1'] == ''){
    return '';
  }
  $capi = new TokenApi();
  $tokenrequest = new CreateToken(array('username' => $capisettings['capi_username_ctt1'], 'password' => $capisettings['capi_password_ctt1']));
  $response =  $capi->oauth2TokenPost($tokenrequest);
  if(isset($response) != true)
  {
    \Drupal::logger('TMGMT_CONTENTAPI')->warning("Invalid Content API V1 credentials found while running CRON");
    return '';
  }
  return $response['access_token'];
}

function tmgmt_contentapi_scan_updated_jobs($capiToken, $cttToken, $filterJobId = null){
  
  $jobJourneyLog = new JobJourneyLog();

  $capiJobs = array();
  $jobsCtt = array();
  $jobs = array();
  $statusapi = new StatusUpdateApi();
  $capiv1jobs = array();
  $capiv2jobs = $statusapi->statusupdatesGet($capiToken);
   
  $jobJourneyLog->writeLogToFile('', "PAN - 5 Inside tmgmt_contentapi_scan_updated_jobs capiv2jobs- In content API function", (array) $capiv2jobs);

  if($cttToken != '')
  {
    $capiv1jobs = $statusapi->jobsJobIdStatusupdatesGet($cttToken);
  }
  
  foreach($capiv1jobs as $value){
    //extract each item and put it inside $capiJobs
    if($filterJobId != null && $filterJobId != $value['job_id']){
      continue;
    }
    $jobInfo = array();
    $jobInfo['type'] = 1;
    $jobInfo['jobId'] = $value['job_id'];
    $jobInfo['updateId'] = $value['update_id'];
    $jobInfo['requestIds'] = $value['request_ids'];
    $jobInfo['updateTime'] = $value['update_time'];
    $jobInfo['status'] = $value->getStatusCode()->getStatusCode();
    if(!array_key_exists($value['job_id'], $jobsCtt)){
      $jobsCtt[$value['job_id']] = array();
      $jobsCtt[$value['job_id']][] = $jobInfo;
      continue;
    }
    if($jobsCtt[$value['job_id']][0]['updateTime'] < $jobInfo['updateTime']){
      array_unshift($jobsCtt[$value['job_id']] , $jobInfo);
    }else{
      $jobsCtt[$value['job_id']][] = $jobInfo;
    }
  }
  foreach($jobsCtt as $value)
  {
    for($idx=0;$idx < count($value); $idx++){
      if($idx == 0){
        $capiJobs[$value[$idx]['jobId']] = $value[$idx];  
        continue;
      }
      $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePutCtt($cttToken,$value[$idx]['updateId']);
    }
  }
  foreach($capiv2jobs as $value){
    
    $jobJourneyLog->writeLogToFile('', "PAN - 6 Inside for loop of tmgmt_contentapi_scan_updated_jobs", (array) $value);

    if($filterJobId != null && $filterJobId != $value['job_id']){
      continue;
    }
    $jobInfo = array();
    $jobInfo['type'] = 2;
    $jobInfo['jobId'] = $value['job_id'];
    $jobInfo['updateId'] = $value['update_id'];
    $jobInfo['requestIds'] = $value['request_ids'];
    $jobInfo['updateTime'] = $value['update_time'];
    $jobInfo['status'] = $value['status_code'];
    $jobInfo['prevStatus'] = '';
    if(!array_key_exists($value['job_id'], $jobsCtt)){
      $jobs[$value['job_id']] = array();
      $jobs[$value['job_id']][] = $jobInfo;
      continue;
    }
   

    if($jobs[$value['job_id']][0]['updateTime'] < $jobInfo['updateTime']){
      $jobJourneyLog->writeLogToFile($value['job_id'], "PAN - 7 Inside for loop of tmgmt_contentapi_scan_updated_jobs Unshift <br/> value: %value <br/> jobs_update_time: %jobs_update_time <br/> jobs_info_update_time", 
      [
        'job_id' => $value['job_id'],
        'jobs_update_time' =>$jobs[$value['job_id']][0]['updateTime'],
        'jobs_info_update_time' => $jobInfo['updateTime'],
      ]
      );
      array_unshift($jobs[$value['job_id']] , $jobInfo);
    }else{
      $jobJourneyLog->writeLogToFile($jobs[$value['job_id']], "PAN - 7 Inside tmgmt_contentapi_scan_updated_jobs capiv2jobs- In content API function:", $jobInfo);
      $jobs[$value['job_id']][] = $jobInfo;
    }
  }
  foreach($jobs as $value)
  {
    $jobJourneyLog->writeLogToFile('', "PAN - 8 Inside for loop of tmgmt_contentapi_scan_updated_jobs:", $value);

    for($idx=0;$idx < count($value); $idx++){
      if($idx == 0){
        \Drupal::logger('TMGMT_CONTENTAPI')->notice('Exiting loop');
        $capiJobs[$value[$idx]['jobId']] = $value[$idx];  
        continue;
      }
      $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePut($capiToken,$value[$idx]['updateId']);
      
      $jobJourneyLog->writeLogToFile($jobs[$value['job_id']], "Acknowledge Job:", [
        'updateId' => $value[$idx]['updateId'],
        'acknowledge' => $acknowledge,
      ]);
    }
  }
  $jobJourneyLog->writeLogToFile('', "Final return from tmgmt_contentapi_scan_updated_jobs ", [$capiJobs, 'Count' =>  count($capiJobs)]);
  return  load_drupal_jobs_from_capi_jobs($capiJobs);
}
function tmgmt_contentapi_fix_older_jobs($cttToken){
  if($cttToken == null || $cttToken == ''){
    return;
  }
  $sub_query2 = \Drupal::database()->select('tmgmt_message', 'c');
  $sub_query2->addExpression("c.tjid", 'tjid');
  $sub_query2->condition('c.type', 'jobinfo','=');
  $sub_query2->groupBy('c.tjid');
  $sub_query3 = \Drupal::database()->select('tmgmt_job', 'd');
  $sub_query3->addField('d', 'tjid');
  $sub_query3->condition('d.tjid', $sub_query2,'NOT IN');
  $sub_query3->condition('d.translator', 'contentapi','=');
  $sub_query3->condition('d.state', '5','<');
  $qryResult2Exec = $sub_query3->execute();
  $qryResult2 = $qryResult2Exec->fetchAll();

  foreach($qryResult2 as $value2)
  {
    $jobId = $value2->tjid;
    $job = Job::load($jobId);
    $requestobjs = unserialize($job->getSetting("capi-remote"));
    $task = $job->getSetting('capi-settings')['task'];
    
    $capijobid = NULL;
    if($task == 'trans'){
      $capijobid = isset($requestobjs[0]) && count($requestobjs) > 0 ? reset($requestobjs[0])->getJobId() : NULL;
    }
    else {
      $capijobid = isset($requestobjs[0]) && count($requestobjs) > 0 ? $requestobjs[0]->getJobId() : NULL;
    }
    
    if($capijobid != NULL && $job->getState() > \Drupal\tmgmt\Entity\Job::STATE_UNPROCESSED) {
     $jobapi = new JobApi();  
     $capiVersion = 1;
      try{
        $projectInfo = $jobapi->jobsJobIdGetCtt($cttToken, $capijobid, "fullWithStats");
        $provider = $projectInfo->getProviderId();
        $jobstatus = 'IMPORTED';//$projectInfo->getStatusCode()->getStatusCode();
        ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $provider, 'jobType' => $capiVersion]);
      }
      catch(Exception $ex){

      }
    }
  }
}
function tmgmt_contentapi_downlaod_data_from_contentapi(TranslatorInterface $translator){
  // TODO: not the correct way to create a multiple objects of one class
  // Declare log object
  $jobJourneyLog = new JobJourneyLog();
  
  $jobJourneyLog->writeLogToFile('', "PAN - 4 - tmgmt_contentapi_downlaod_data_from_contentapi - In content API function",['translatorLable' => $translator->label()]);

  $capiToken = tmgmt_get_capi_token($translator);
  $cttToken = tmgmt_get_ctt_token($translator);
  tmgmt_contentapi_fix_older_jobs($cttToken);
  $capiJobs = tmgmt_contentapi_scan_updated_jobs($capiToken, $cttToken);

  \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 10 From content API function capiToken: %capiToken <br/> cttToken: %cttToken <br/> capiJobs: %capiJobs', [
    '%capiToken' => $capiToken,
    '%cttToken' => $cttToken,
    '%capiJobs' => json_decode(json_encode($capiJobs)),
  ]);

  if(count($capiJobs) > 0 ){
    \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 11 From content API function totalCapiJobs: %totalCapiJobs', [
      '%totalCapiJobs' => count($capiJobs),
    ]);
    tmgmt_contentapi_downlaod_for_jobs($capiToken, $cttToken, $capiJobs, $translator->isAutoAccept()); 
  }
}

function tmgmt_contentapi_downlaod_data_from_contentapi_by_job($capiToken, $cttToken, array $jobInfo, $autoaccept){
  try
  {
    $job = $jobInfo['drupalJob'];
    $prId = $jobInfo['jobId'];
    $job_status = $jobInfo['status'];
    $request_ids = $jobInfo['requestIds'];
    $job_from = $jobInfo['type'];
    $fileapi = new FileApi();
    $requestapi = new RequestApi();
    $dir = $job->getSetting('scheme') . '://tmgmt_contentapi/LioxReceivedFiles/';
   
    if (\Drupal::service('file_system')->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY)) {
      $stmrg = \Drupal::service('stream_wrapper_manager')->getViaUri($job->getSetting('scheme') . '://tmgmt_contentapi/LioxReceivedFiles/');
      $tempfolder = $stmrg->realpath();
      $config = new Configuration();
      $config->setTempFolderPath($tempfolder);
      Configuration::setDefaultConfiguration($config);

      foreach($request_ids as $request_id){
        if($job_from == 1)
        {
          $spfilearray = $fileapi->jobsJobIdRequestsRequestIdRetrievefileGetWithHttpInfoCtt($cttToken,$prId,$request_id);
        }
        else
        {
          $spfilearray = $fileapi->jobsJobIdRequestsRequestIdRetrievefileGetWithHttpInfo($capiToken,$prId,$request_id);
        }
  
        $spfile = $spfilearray[0];
        $fcontent = $spfile->fread($spfile->getSize());
        $fpath = $spfile->getRealPath();
        $spfilearray[0] = NULL;
        $spfile = NULL;
        \Drupal::service('file_system')->delete($fpath);
        $filename = str_replace('"','',explode("=",explode(";",$spfilearray[2]['Content-Disposition'][0])[1])[1]);
        tmgmt_contentapi_import($job,$fcontent,$filename);

      }

      $arrayofrequestid = new ArrayOfRequestIds(array('request_ids'=>$request_ids));


      if($autoaccept == true){
        if($job_from == 1)
        {
          $requestapi->jobsJobIdRequestsApprovePutCtt($cttToken,$prId,$arrayofrequestid);
        }
        else
        {
          $requestapi->jobsJobIdRequestsApprovePut($capiToken,$prId,$arrayofrequestid);
        }
      }
      
    }
    else
    {
      \Drupal::messenger()->addMessage(t('Directory could not be created: ') . $dir);
      return;
    }
  }
  catch (Exception $exception){
    $respbody = $exception->getMessage();
    if($exception instanceof \Drupal\tmgmt_contentapi\Swagger\Client\ApiException){
      $respbody = $exception->getResponseBody();
    }
    $respbody = 'An error occured while fetching and importing files: '.$respbody;
    if(strlen($respbody) > 200){
        $respbody = substr($respbody,0,200);
    }
    \Drupal::messenger()->addMessage($respbody,'error');
  }
}

function tmgmt_contentapi_downlaod_for_jobs($capiToken, $cttToken, array $capiJobs, $autoaccept){
  $jobJourneyLog = new JobJourneyLog();
  \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 12 in download for job function');
  $statusapi = new StatusUpdateApi();
  $capiToDeliver = array();
  $capiCancelled = array();
  $capiToIgnore = array();
  \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 13 from download for job function capiJobs: %capiJobs', [
    '%capiJobs' => $capiJobs,
  ]);
  foreach($capiJobs as $value)
  {
    //IF THE JOB IS NOT ACTIVE
    if($value["drupalJob"]->getState() != 1){
      $capiToIgnore[$value['jobId']] = $value;
      continue;
    }
    switch($value['status']){
        case "REVIEW_TRANSLATION":
          case "TRANSLATION_APPROVED":
            $capiToDeliver[$value['jobId']] = $value;
          break;
        case "CANCELLED":
          $capiCancelled[$value['jobId']] = $value;
          break;
        default:
          $capiToIgnore[$value['jobId']] = $value;
    }
  }
  $jobJourneyLog->writeLogToFile('', "Job Count:", [
    'capiCancelled' => count($capiCancelled),
    'capiToDeliver' => count($capiToDeliver),
    'capiToIgnore' => count($capiToIgnore)
  ]);
  foreach($capiToIgnore as $value)
  {
    if($value['updateId'] != '')
    {
      if($value['type'] == 1)
      {
        $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePutCtt($cttToken,$value['updateId']);
      }
      else
      {
        $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePut($capiToken,$value['updateId']);
        $jobJourneyLog->writeLogToFile('', "Acknowledge Job: capiToIgnore : ", [
          'updateId' => $value['updateId'],
          'acknowledge' => $acknowledge,
        ]);
      }
    }
  }

  foreach($capiCancelled as $value)
  {
    if($value['updateId'] != '')
    {
      $value['drupalJob']->setState(Job::STATE_ABORTED);//THIS IS TMGMT JOB CANCEL there is no cancel in tmgmt
      if($value['type'] == 1)
      {
        $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePutCtt($cttToken,$value['updateId']);
      }
      else
      {
        $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePut($capiToken,$value['updateId']);
        $jobJourneyLog->writeLogToFile('', "Acknowledge Job: capiCancelled :", [
          'updateId' => $value['updateId'],
          'acknowledge' => $acknowledge,
        ]);
      }
    }
    
  }

  foreach($capiToDeliver as $value)
  {
    
    tmgmt_contentapi_downlaod_data_from_contentapi_by_job($capiToken, $cttToken, $value, $autoaccept);
    if($value['updateId'] != '')
    {
      try{
        
        if($value['type'] == 1)
        {
          $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePutCtt($cttToken,$value['updateId']);
        }
        else
        {
          $acknowledge = $statusapi->statusupdatesUpdateIdAcknowledgePut($capiToken,$value['updateId']);
          $jobJourneyLog->writeLogToFile('', "Acknowledge Job: capiToDeliver :", [
            'updateId' => $value['updateId'],
            'acknowledge' => $acknowledge,
          ]);
        }
      }
      catch (Exception $exception){
        \Drupal::logger('TMGMT_CONTENTAPI')->error('Could not check delivery list for provider %provider: %message', [
          '%provider'=> $translator->id(),
          '%message'=> $exception->getMessage(),
        ]);
      }
    }
  }
}

function tmgmt_contentapi_downlaod_data_from_contentapi_by_job_manual(TranslatorInterface $translator, JobInterface $job){

  $capiToken = tmgmt_get_capi_token($translator);
  $cttToken = tmgmt_get_ctt_token($translator);


  $capiJob = tmgmt_contentapi_get_capijob_from_drupaljob($capiToken, $cttToken, $job);//NEED TO CALL THE NEW ONE
  if($capiJob['status'] != StatusCodeEnum::REVIEW_TRANSLATION && $capiJob['status'] != StatusCodeEnum::TRANSLATION_APPROVED){
    return;
  }
  ConentApiHelper::capiJobSetStoredData($capiJob['drupalJob'], ['jobId'=> $capiJob['jobId'],'jobStatus' => $capiJob['status'],'providerId' => $capiJob['providerId'], 'jobType' => $capiJob['type']]);
  $capiJobs = tmgmt_contentapi_scan_updated_jobs($capiToken, $cttToken, $capiJob['jobId']);
  if(count($capiJobs) == 0){
    $capiJobs[$capiJob['jobId']] = $capiJob;
  }
  tmgmt_contentapi_downlaod_for_jobs($capiToken, $cttToken, $capiJobs, $translator->isAutoAccept());
}  

/**
 * Implements hook_file_download().
 */
function tmgtm_contentapi_file_download($uri) {
  // Get the file record based on the URI. If not in the database just return.
  $fids = \Drupal::entityQuery('file')
    ->condition('uri', $uri)
    ->execute();
  if ($fids) {
    $files = \Drupal\file\Entity\File::loadMultiple($fids);
    foreach ($files as $item) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($item->getFileUri() === $uri) {
        $file = $item;
        break;
      }
    }
  }
  if (!isset($file)) {
    return;
  }

  // Check if this file belongs to a job.
  $usage_list = \Drupal::service('file.usage')->listUsage($file);
  if (!isset($usage_list['tmgmt_contentapi']['tmgmt_job'])) {
    return;
  }

  foreach (Job::loadMultiple(array_keys($usage_list['tmgmt_fwconnector']['tmgmt_job'])) as $job) {
    if ($job->access('view')) {
      // Access is granted.
      $headers = file_get_content_headers($file);
      return $headers;
    }
  }
  // Returning nothing means access denied unless another module specifically
  // grants access.
}


function tmgmt_contentapi_cron() {
  $jobJourneyLog = new JobJourneyLog();
  $jobJourneyLog->writeLogToFile('', "PAN - 1 Cron started:", []);
  // Get all translators.
  $translators = \Drupal::entityTypeManager()->getStorage('tmgmt_translator')->loadByProperties(['plugin' => 'contentapi']);
  $jobJourneyLog->writeLogToFile('', "Translator", (array) $translators);
  if (!$translators) {
    $jobJourneyLog->writeLogToFile('', "No translators found", (array) $translators);
    return;
  }


  foreach ($translators as $translator) {
    \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 2 Checking translation for  %translator', [
      '%translator' => $translator->label(),
    ]);
    
    $jobJourneyLog->writeLogToFile('', "PAN - 2 Translator for",['translatorLable' => $translator->label()]);
    // Receive all processed translations.
    //module_load_include('inc', 'tmgmt_fwconnector', 'tmgmt_fwconnector.cron');
    $config = $translator->getSetting('cron-settings');
    \Drupal::logger('TMGMT_CONTENTAPI')->notice('PAN - 3 translator configuration status  %config', [
      '%config' => $config['status'],
    ]);
    $jobJourneyLog->writeLogToFile('', "Translator configuration status",['ConfigStatus' => $config['status']]);

    // Make sure cron is enabled for this translator.
    if (!$config['status']) {
      $jobJourneyLog->writeLogToFile('', "Cron disabled for translator",[]);
      continue;
    }
    tmgmt_contentapi_downlaod_data_from_contentapi($translator);
  }
}


/**
 * Implements hook_tmgmt_job_delete().
 */
function tmgmt_contentapi_tmgmt_job_delete(JobInterface $job) {
  // If job has not been processed yet, we don't need to delete remote job.

  if($job->getState() == Job::STATE_UNPROCESSED){
    return;
  }
  $translator = $job->getTranslator();
  // Ignore jobs that don't have a file translator.
  if (!$translator || $translator->getPlugin()->getPluginId() != 'contentapi') {
    return;
  }

  try {
    $capisettings = $translator->getSetting('capi-settings');
    $capi = new TokenApi();
    $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
    $jobid = GeneralHelper::getCpJobIdfromLocJob($job);
    $jobapi = new JobApi();
    $jobapi->jobsJobIdDelete($token,$jobid);
    \Drupal::messenger()->addMessage(t("Content API Job deleted:") . $jobid);
  }
  catch (Exception $ex) {
    \Drupal::messenger()->addMessage(t('The job with ID @proj 
    could not be deleted in content api. It probably doesn\'t extist. 
    Please contact the responsible project manager in case of questions.', array('@proj' => $jobid)));
  }
  // Check if there are any files that need to be deleted.
  // @todo There doesn't seem to be an API function for this...
  $args = [
    ':module' => 'tmgmt_contentapi',
    ':type' => 'tmgmt_job',
    ':id' => $job->id(),
  ];
  $result = \Drupal::database()->query('SELECT fid FROM {file_usage} WHERE module = :module and type = :type and id = :id', $args);
  $fids = $result->fetchCol();
  if (!empty($fids)) {
    // Remove file usage record.
    $file_usage = \Drupal::service('file.usage');
    foreach (File::loadMultiple($fids) as $file) {
      $file_usage->delete($file, 'tmgmt_contentapi', 'tmgmt_job', $job->id());
      // If this was the last usage, FileUsageBase marks the file as temporary
      // for delayed deletion. Because we know it is not needed, delete the file
      // immediately.
      $usage = $file_usage->listUsage($file);
      if (empty($usage)) {
        $file->delete();
      }
    }

  }

}


function tmgmt_contentapi_views_pre_view(Drupal\views\ViewExecutable $view) {

  if ($view->id() == 'tmgmt_job_overview') {
    $deliveryhtml = '';
    $options = array(
      'id' => 'area_deliveries_contentapi',
      'table' => 'views',
      'field' => 'area_text_custom',
      'relationship' => 'none',
      'group_type' => 'none',
      'admin_label' => '',
      'empty' => TRUE,
      'tokenize' => FALSE,
      'content' => $deliveryhtml,
      'plugin_id' => 'text_custom',
    );
    $view->setHandler($view->current_display, 'header', 'area_deliveries_contentapi', $options);
  }
}

function tmgmt_contentapi_views_data() {
  $data['views']['table']['group'] = t('Custom Global');
  $data['views']['table']['join'] = [
    // #global is a special flag which allows a table to appear all the time.
    '#global' => [],
  ];

  $data['views']['job_status_field'] = [
    'title' => t('Job Status'),
    'help' => t('The status of the job'),
    'field' => [
      'id' => 'job_status_field',
    ],
  ];

  $data['views']['job_lioxid_field'] = [
    'title' => t('Liox ID'),
    'help' => t('The liox ID of the job'),
    'field' => [
      'id' => 'job_lioxid_field',
    ],
  ];

  $data['views']['job_providerid_field'] = [
    'title' => t('Provider Name'),
    'help' => t('The provider name of the job'),
    'field' => [
      'id' => 'job_providerid_field',
    ],
  ];
  return $data;
}

function CpprocessHtmlForJoboverview(&$view){
  $activejobs = array();
  $result = $view->result;
  foreach ($result as $row) {
    $job = $row->_entity;
    if($job->hasTranslator()){
      $jobtranslator = $job->getTranslator();
      $trid = $jobtranslator->getPlugin()->getPluginId();
      $trname = $job->getTranslatorId();
      if($job->getState() == Job::STATE_ACTIVE && $trid == 'contentapi'){
        if(!isset($activejobs[$trname])) {
          $activejobs[$trname] = array($job);
        }
        else{
          $activejobs[$trname] = array_merge( $activejobs[$trname],array($job));
        }
      }
    }

  }

  $deliveryforjobs = array();
  If(count($activejobs)> 0) {
    foreach ($activejobs as $trid => $jobs) {
      // Array with translators.
      $translators = \Drupal::entityTypeManager()->getStorage('tmgmt_translator')->loadByProperties(['name' => $trid]);
      $capisettings = $jobtranslator->getSetting('capi-settings');
      $capi = new TokenApi();
      $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
      foreach ($jobs as $job){
        $requestapi = new RequestApi();
        $cpjobid = GeneralHelper::getCpJobIdfromLocJob($job);
        $cprequestsforjob = $requestapi->jobsJobIdRequestsGet($token,$cpjobid);
        $anyrequesttoreview = FALSE;
        foreach ($cprequestsforjob as $tempreq){
          if($tempreq->getStatusCode() == StatusCodeEnum::REVIEW_TRANSLATION){
            $anyrequesttoreview = TRUE;
            break;
          }
        }
        if($anyrequesttoreview){
          $deliveryforjobs = array_merge($deliveryforjobs,array($job));
        }
      }

    }
  }
  $deliveryhtml = '';
  if(count($deliveryforjobs)>0) {
    $deliveryhtml = '<details data-drupal-selector="edit-deliveries-wrapper" style="background: #3cff75" id="edit-deliveries-wrapper" class="js-form-wrapper form-wrapper">    
	<summary role="button" aria-controls="edit-deliveries-wrapper" aria-expanded="true" aria-pressed="true">
		CONTENT API DELIVERIES
	</summary>
	<div class="details-wrapper">';
    foreach ($deliveryforjobs as $job) {
      $jobid = $job->get('tjid')->getValue()[0];
      global $base_url;
      // Using Id here, as job label returns @title@title and @more more.
      $joblable = GeneralHelper::getJobLabel($job);
      $pass_link = \Drupal::l(t($joblable), \Drupal\Core\Url::fromUri($base_url . '/admin/tmgmt/jobs/' . $jobid['value']));
      $currentlink = $pass_link->getGeneratedLink();

      $deliveryhtml .= '<li>'.$currentlink .'</li>';
      // In \Drupal::messenger()->addMessage
    }
    $deliveryhtml .= '</div></details>';
  }
  return $deliveryhtml;
}

function CpcreateFileObjectFromStdClass($filearray){
  $filsystem = \Drupal::service('file_system');
  $toreturn = array();
  foreach ($filearray as $fl) {
    $file = File::create([
      'uid' => \Drupal::currentUser()->id(),
      'filename' => $filsystem->basename($fl->filename),
      'uri' => $fl->uri,
      'filemime' => \Drupal::service('file.mime_type.guesser')->guess($fl->uri),
      'filesize' => filesize($fl->uri),
      'status' => 1
    ]);
    $file->save();
    array_push($toreturn,$file);
  }
  return $toreturn;
}


function tmgmt_contentapi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  /*
  $myForm = $form;
  if($form_id == 'views_exposed_form'){
    
    $form['actions']['update_status'] = [
      '#type' => 'submit',
      '#value' => t('Force Status Update'),
      '#access' => true,
      '#submit' => array('test_me',),
      ];
  }
  */
  if($form_id == 'tmgmt_job_item_edit_form') {
    $item = $form_state->getFormObject()->getEntity();
    $translator = $item->getJob()->getTranslator()->getPlugin()->getPluginId();
    if(isset($translator) && $translator == 'contentapi') {
      /*
      $form['actions']['reject'] = [
      '#type' => 'submit',
      '#value' => t('Reject Translation'),
      '#access' => !$form_state->get('all_preliminary'),
      '#submit' => ['::submitForm', '::save'],
      ];
       */

      if($item->getJob()->getState() != Job::STATE_UNPROCESSED) {
        if (isset($form['actions']['abort_job_item'])) {
          unset($form['actions']['abort_job_item']);
        }
        if (isset($form['actions']['delete'])) {
          unset($form['actions']['delete']);
        }
      }
    }
  }
  if ($form_id == 'tmgmt_job_edit_form'){
    
    try {
      $job = $form_state->getFormObject()->getEntity();
      
      $translator = $job->getTranslator();
      
      $capisettings = $translator->getSetting('capi-settings');
      $capi = new TokenApi();
      $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
      $translatorid = $translator->getPluginId();
      if (isset($translator) && $translatorid == 'contentapi') {
        
        if ($job->getState() == Job::STATE_ACTIVE) {
          // remove abort button
          if (isset($form['actions']['abort_job'])) {
            unset($form['actions']['abort_job']);
          }
          if($capisettings['capi_username_ctt1'] != '')
          {
            $tokenrequest = new CreateToken(array('username' => $capisettings['capi_username_ctt1'], 'password' => $capisettings['capi_password_ctt1']));
            $capi = new TokenApi();
            $tokenobj = $capi->oauth2TokenPost($tokenrequest);
          }
          $jobapi = new JobApi();
         
          $find_job = $jobapi->FindJob($token, GeneralHelper::getCpJobIdfromLocJob($job));
          
          if($find_job != 200) 
            {
              if($capisettings['capi_username_ctt1'] == '')
              {
                //\Drupal::messenger()->addMessage(t('Please configure the CAPI V1 credentials'),'error');
                return;
              }
              if(isset($tokenobj) != true)
              {
                \Drupal::logger('TMGMT_CONTENTAPI')->warning("Invalid Content API V1 credentials found while running CRON");
                return;
              }
              $projectInfo = $jobapi->jobsJobIdGetCtt($tokenobj['access_token'], GeneralHelper::getCpJobIdfromLocJob($job), "fullWithStats");
              $jobstatus = $projectInfo->getStatusCode()->getStatusCode();
            }
            else
            {
              $projectInfo = $jobapi->jobsJobIdGet($token, GeneralHelper::getCpJobIdfromLocJob($job), "fullWithStats");
              if($projectInfo->getStatusCode() != 'COMPLETED')
              {
                $jobstatus = $jobapi->jobsJobIdGetStatus($token, GeneralHelper::getCpJobIdfromLocJob($job));
              }
              else
              {
              $jobstatus = $projectInfo->getStatusCode();
              }
            }
          if ($jobstatus != StatusCodeEnum::COMPLETED && $jobstatus != StatusCodeEnum::CANCELLED && $jobstatus != StatusCodeEnum::TRANSLATION_REJECTED) {
            //remove delete button
            if (isset($form['actions']['delete'])) {
              unset($form['actions']['delete']);
            }
          }
        }
      }
    }
    catch (Exception $exception){
        $msg = t('an error occured while updating job\'s operations and state: ' . $exception->getMessage());
        if(strlen($msg)>200){
            $msg = substr($msg,0,200);
        }
       // \Drupal::messenger()->addMessage($msg,'warning');
      $job->addMessage($msg);
    }
  }

}

/**
 * Comment.
 *
 * @param array $form
 *   Comment.
 * @param FormStateInterface $form_state
 *   Comment.
 *
 * @return mixed
 *   Comment.
 */
function ajax_tmgmt_contentapi_provider_changed(array $form, &$form_state) {
  return $form['translator_wrapper']['settings']['capi-settings']['quote'];

}


function tmgmt_contentapi_form_tmgmt_job_edit_form_alter(&$form, FormStateInterface &$form_state) {
  setValidator($form, $form_state);
}

function tmgmt_contentapi_job_form_validate(&$form, &$form_state){
  $values = $form_state->cleanValues()->getValues();
  if($values == null || array_key_exists('settings',$values) != TRUE || array_key_exists('capi-settings',$values['settings']) != TRUE){
    return;
  }
  $date = $values['settings']['capi-settings']['due_date'];

  $provider = $values['settings']['capi-settings']['provider'];

  if($provider != ''){
    if((new DateTime($date) >= new DateTime()) != true){
      $form_state->setErrorByName('due_date', t('Due Date must be greater than current date and time'));
    }
  } 
  canTranslateByProvider($form, $form_state);
}


function canTranslateByProvider(&$form, FormStateInterface &$form_state){
  $job = $form_state->getFormObject()->buildEntity($form, $form_state);
  
  if($job->hasTranslator()) {
    $translator = $job->getTranslator();
    if ($translator->getPluginId() == 'contentapi') {
      $plugin = $translator->getPlugin();
      if (!canCustomTranslate($translator, $job, $plugin)) {
        //\Drupal::messenger()->addMessage(t('@translator can not translate from @source to @target.', array('@translator' => $translator->label(), '@source' => $job->getSourceLanguage()->getName(), '@target' => $job->getTargetLanguage()->getName())), 'error');
        $form_state->setError($form['translator_wrapper']['translator'],
          t('@translator can not translate from @source to @target.', [
            '@translator' => $translator->label(),
            '@source' => $job->getSourceLanguage()->getName(),
            '@target' => $job->getTargetLanguage()->getName()
          ]));
      }

    }
  }

}

function setValidator(&$form, FormStateInterface &$form_state){
  if(!isset($form['#validate']['tmgmt_contentapi_job_form_validate'])) {
    $form['#validate'][] = 'tmgmt_contentapi_job_form_validate';
  }
}

function canCustomTranslate(TranslatorInterface $translator, JobInterface $job, \Drupal\tmgmt\TranslatorPluginInterface $plugin) {
  $job_state = $job->getState();
  $capisettings = $translator->getSetting('capi-settings');
  $capi = new TokenApi();
  $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
  $langmappingsremote = $translator->getRemoteLanguagesMappings();
  $capisettings = $translator->getSetting('capi-settings');
  // $defaultproviderkey = $capisettings['provider'];
  $defaultproviderkey = $capisettings['provider'];
  $providerId = isset($job->getSetting('capi-settings')['provider']) ? $job->getSetting('capi-settings')['provider'] : $defaultproviderkey;
  $jobapi = new JobApi();
 
  if($job_state == Job::STATE_ACTIVE)
  {
    $jobid = GeneralHelper::getCpJobIdfromLocJob($job);
    $find_job = $jobapi->FindJob($token, $jobid);
    if($capisettings['capi_username_ctt1'] != '')
    {
      $tokenrequest = new CreateToken(array('username' => $capisettings['capi_username_ctt1'], 'password' => $capisettings['capi_password_ctt1']));
      $capi = new TokenApi();
      $tokenobj = $capi->oauth2TokenPost($tokenrequest);
    }
    if($find_job != 200)
    {
      if($capisettings['capi_username_ctt1'] == '')
      {
        return;
      }
      if(isset($tokenobj) != true)
      {
        \Drupal::logger('TMGMT_CONTENTAPI')->warning("Invalid Content API V1 credentials found while running CRON");
        return;
      }
      $projectInfo = $jobapi->jobsJobIdGetCtt($tokenobj['access_token'], $jobid, "fullWithStats");
      $provider_id = $projectInfo->getProviderId();
      $provider = getProviderCtt($tokenobj['access_token'], $provider_id);
    }
    else
    {
      $provider = getProvider($token, $providerId);
    }
  }
  else
  {
    $provider = getProvider($token, $providerId);
  }
  
  
  // $providerId = isset($job->getSetting('capi-settings')['provider']) ? $job->getSetting('capi-settings')['provider'] : $defaultproviderkey

  $capabilities = isset($provider) ? $provider->getCapabilities() : NULL;
  if(isset($capabilities)) {
    $provider_supported_langs = $capabilities->getSupportedLanguages();
    $supports_lang = FALSE;
    if (!isset($provider_supported_langs)) {
      return TRUE;
    }
    else {
      foreach ($provider_supported_langs as $lang_pair) {
        $job_remote_source_lang = $langmappingsremote[$job->getSourceLangcode()];
        $job_remote_target_lang = $langmappingsremote[$job->getTargetLangcode()];
        if (in_array($job_remote_source_lang, $lang_pair->getSources()) &&
          in_array($job_remote_target_lang, $lang_pair->getTargets())) {
          $supports_lang = TRUE;
        }
      }
      if ($supports_lang) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  }
  else {
    return TRUE;
  }
}


function tmgmt_contentapi_check_empty_file($form,&$form_state){
  $all_files = \Drupal::request()->files->get('files', []);
  // Make sure there's an upload to process.
  if (empty($all_files['file'])) {
    $form_state->setErrorByName('file',t('No files selected, action cannot be completed.'));
  }
}

function tmgmt_contentapi_entity_operation_alter(array &$operations,\Drupal\Core\Entity\EntityInterface  $entity) {
  /*
  $newop = $operations['manage'];
  if(!isset($operations['updatestatus'])){
    $operations['updatestatus'] = [
      'url' => new \Drupal\Core\Url('testme'),
      'title' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Force Update'),
      'weight' => -60
    ];
  }
  */
  try {
    // instance of tmgmt_job
    if ($entity instanceof Job) {
      // get local state of the job
      $localjobstate = $entity->getState();
      if ($localjobstate == Job::STATE_ACTIVE) {
        $jobtranslator = $entity->getTranslator();
        $jobtranslatorId = $jobtranslator->getPluginId();
        // modify operations only for contentapi translator
        if ($jobtranslatorId == 'contentapi') {
          $capisettings = $jobtranslator->getSetting('capi-settings');
          $capi = new TokenApi();
          $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
          // TODO: check remote job's state, if canceled, do not remove delete operation
          if (isset($operations['abort'])) {
            unset($operations['abort']);
          }
          if($capisettings['capi_username_ctt1'] != '')
          {
            $tokenrequest = new CreateToken(array('username' => $capisettings['capi_username_ctt1'], 'password' => $capisettings['capi_password_ctt1']));
            $capi = new TokenApi();
            $tokenobj = $capi->oauth2TokenPost($tokenrequest);
          }
          $jobapi = new JobApi();
          $find_job = $jobapi->FindJob($token, GeneralHelper::getCpJobIdfromLocJob($entity));
          
          if($find_job != 200) 
            {
              if($capisettings['capi_username_ctt1'] == '')
              {
                return;
              }
              if(isset($tokenobj) != true)
              {
                \Drupal::logger('TMGMT_CONTENTAPI')->warning("Invalid Content API V1 credentials found while running CRON");
                return;
              }
              $projectInfo = $jobapi->jobsJobIdGetCtt($tokenobj['access_token'], GeneralHelper::getCpJobIdfromLocJob($entity), "fullWithStats");
              $remotestatus = $projectInfo->getStatusCode()->getStatusCode();
            }
            else
            {
              $projectInfo = $jobapi->jobsJobIdGet($token, GeneralHelper::getCpJobIdfromLocJob($entity), "fullWithStats");
              if($projectInfo->getStatusCode() != 'COMPLETED')
              {
                $remotestatus = $jobapi->jobsJobIdGetStatus($token, GeneralHelper::getCpJobIdfromLocJob($entity));
              }
              else
              {
              $remotestatus = $projectInfo->getStatusCode();
              }
            }
          if($remotestatus != StatusCodeEnum::COMPLETED && $remotestatus != StatusCodeEnum::CANCELLED && $remotestatus != StatusCodeEnum::TRANSLATION_REJECTED) {
            if (isset($operations['delete'])) {
              unset($operations['delete']);
            }
          }
        }
      }
    }
    if($entity instanceof JobItem){
      $job = $entity->getJob();
      $localjobstate = $job->getState();
      if ($localjobstate != Job::STATE_UNPROCESSED) {
        $jobtranslator = $job->getTranslator();
        $jobtranslatorId = $jobtranslator->getPluginId();
        // modify operations only for contentapi translator
        if ($jobtranslatorId == 'contentapi') {
          if (isset($operations['abort'])) {
            unset($operations['abort']);
          }
          if (isset($operations['delete'])) {
            unset($operations['delete']);
          }
        }
      }
    }
  }
  catch (Exception $exception){
    $msg = t('an error occured while updating job\'s operations and state: ' . $exception->getMessage());
    if(strlen($msg) > 200){
          $msg = substr($msg,0,200);
    }
    $entity->addMessage($msg);
  }
}

function getProviders($token){
  $providers = NULL;
  if(isset($token) && $token != '') {
    try {
      $providerapi = new ProviderApi();
      $providers = $providerapi->providersGet($token);
    } catch (Exception $e) {
      $msg = $e->getMessage();
      if(strlen($msg) > 200){
            $msg = substr($msg,0,200);
      }
      \Drupal::messenger()->addMessage($msg);
    }
  }
  $providersarray = array();
  foreach ($providers as $provider) {
    $prid = $provider->getProviderId();
    $prname = $provider->getProviderName();
    $providersarray[$prid] = $prname;
  }
  asort($providersarray, SORT_REGULAR);
  return $providersarray;
}


function getProvider($token, $providerId){
  $provider = NULL;
  if(isset($token) && $token != '') {
    try {
      $providerapi = new ProviderApi();
      $provider = $providerapi->providersProviderIdGet($token, $providerId);
    } catch (Exception $e) {
      
      $msg = $e->getMessage();
      if(strlen($msg) > 200){
            $msg = substr($msg,0,200);
      }
      \Drupal::messenger()->addMessage($msg);
    }
  }

  return $provider;
}

function getProviderCtt($token, $providerId){
  $provider = NULL;
  if(isset($token) && $token != '') {
    try {
      $providerapi = new ProviderApi();
      $provider = $providerapi->providersProviderIdGetCtt($token, $providerId);
    } catch (Exception $e) {
		$msg = $e->getMessage();
      if(strlen($msg) > 200){
            $msg = substr($msg,0,200);
      }
      \Drupal::messenger()->addMessage($msg);
		
      //\Drupal::messenger()->addMessage($e->getMessage());
    }
  }

  return $provider;
}

function tmgmt_contentapi_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'tmgmt_contentapi/my-block-styling';
}